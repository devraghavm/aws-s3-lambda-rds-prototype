name: Deploy Infrastructure
on:
  workflow_dispatch:
    inputs:
      # Working directory input from user.
      resource:
        type: choice
        description: Choose the resource
        options:
          - iac/nodejs/
      app_dir:
        type: choice
        description: Choose the app directory
        options:
          - src/nodejs/
      # Terraform action you want to perform
      action:
        description: 'Terraform Action to Perform'
        type: choice
        options:
          - Terraform_plan
          - Terraform_apply
          - Terraform_destroy

jobs:
  create_app_archives:
    name: 'Create App Archives'
    if: ${{ github.event.inputs.action == 'Terraform_plan' || github.event.inputs.action == 'Terraform_apply' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.event.inputs.app_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup node environment
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install # will run `yarn install` command
          dir: ${{ github.event.inputs.app_dir }}
      - name: Application build
        uses: borales/actions-yarn@v4
        with:
          cmd: build
          dir: ${{ github.event.inputs.app_dir }}
      - name: Package build
        uses: borales/actions-yarn@v4
        with:
          cmd: package
          dir: ${{ github.event.inputs.app_dir }}
      - uses: actions/upload-artifact@master
        with:
          name: updated-app
          path: ${{ github.workspace }}
      # - name: Zip Layers
      #   working-directory: ${{ github.event.inputs.app_dir }}
      #   run: |
      #     zip -r dist/deps.zip dist/layers/deps-layer/
      #     zip -r dist/services.zip dist/src/layers/service-layer/
      # - name: Zip Lambda
      #   working-directory: ${{ github.event.inputs.app_dir }}
      #   run: |
      #     zip -r dist/data-ingest-lambda.zip dist/src/handlers/data-ingest-lambda/
  terraform_apply:
    name: 'Terraform'
    needs: create_app_archives
    if: ${{ github.event.inputs.action == 'Terraform_plan' || github.event.inputs.action == 'Terraform_apply' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.event.inputs.resource }}
    steps:
      - uses: actions/checkout@master

      - uses: actions/download-artifact@master
        with:
          name: updated-app
          path: ${{ github.workspace }}
      - name: Print working directory
        run: pwd
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      - name: Check Path Module Path
        run: |
          cd ./../../src/nodejs/
          pwd
          ls -lrt

      # Generates an execution plan for Terraform
      # Make sure AWS_ACCOUNT_ID is set in your repository secrets
      - name: Terraform Plan
        run: |
          terraform plan -out=plan -input=false -var-file="variables.tfvars" -var account_id=${{ secrets.AWS_ACCOUNT_ID }}

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'Terraform_apply' }}
        run: terraform apply -auto-approve -input=false  plan
  terraform_destroy:
    name: 'Terraform_destroy'
    if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.event.inputs.resource }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ github.event.inputs.resource }}
        run: terraform destroy -auto-approve -var-file=variables.tfvars -var account_id=${{ secrets.AWS_ACCOUNT_ID }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-2
